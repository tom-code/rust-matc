//! Generated Matter TLV encoders and decoders for OTA Software Update Requestor Cluster
//! Cluster ID: 0x002A
//! 
//! This file is automatically generated from OTARequestor.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct ProviderLocation {
    pub provider_node_id: Option<u64>,
    pub endpoint: Option<u16>,
}

// Command encoders

/// Encode AnnounceOTAProvider command (0x00)
pub fn encode_announce_ota_provider(provider_node_id: u64, vendor_id: u16, announcement_reason: u8, metadata_for_node: Vec<u8>, endpoint: u16) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(provider_node_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt16(vendor_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt8(announcement_reason)).into(),
        (3, tlv::TlvItemValueEnc::OctetString(metadata_for_node)).into(),
        (4, tlv::TlvItemValueEnc::UInt16(endpoint)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode DefaultOTAProviders attribute (0x0000)
pub fn decode_default_ota_providers(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<ProviderLocation>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(ProviderLocation {
                provider_node_id: item.get_int(&[1]),
                endpoint: item.get_int(&[2]).map(|v| v as u16),
            });
        }
    }
    Ok(res)
}

/// Decode UpdatePossible attribute (0x0001)
pub fn decode_update_possible(inp: &tlv::TlvItemValue) -> anyhow::Result<bool> {
    if let tlv::TlvItemValue::Bool(v) = inp {
        Ok(*v)
    } else {
        Err(anyhow::anyhow!("Expected Bool"))
    }
}

/// Decode UpdateState attribute (0x0002)
pub fn decode_update_state(inp: &tlv::TlvItemValue) -> anyhow::Result<u8> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u8)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode UpdateStateProgress attribute (0x0003)
pub fn decode_update_state_progress(inp: &tlv::TlvItemValue) -> anyhow::Result<Option<u8>> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(Some(*v as u8))
    } else {
        Ok(None)
    }
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x002A {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x002A, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_default_ota_providers(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_update_possible(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0002 => {
            match decode_update_state(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0003 => {
            match decode_update_state_progress(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "DefaultOTAProviders"),
        (0x0001, "UpdatePossible"),
        (0x0002, "UpdateState"),
        (0x0003, "UpdateStateProgress"),
    ]
}

