//! Generated Matter TLV encoders and decoders for Actions Cluster
//! Cluster ID: 0x0025
//! 
//! This file is automatically generated from ActionsCluster.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct Action {
    pub action_id: Option<u16>,
    pub name: Option<String>,
    pub type_: Option<u8>,
    pub endpoint_list_id: Option<u16>,
    pub supported_commands: Option<u8>,
    pub state: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct EndpointList {
    pub endpoint_list_id: Option<u16>,
    pub name: Option<String>,
    pub type_: Option<u8>,
    pub endpoints: Option<Vec<u16>>,
}

// Command encoders

/// Encode InstantAction command (0x00)
pub fn encode_instant_action(action_id: u16, invoke_id: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode InstantActionWithTransition command (0x01)
pub fn encode_instant_action_with_transition(action_id: u16, invoke_id: u32, transition_time: u16) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt16(transition_time)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode StartAction command (0x02)
pub fn encode_start_action(action_id: u16, invoke_id: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode StartActionWithDuration command (0x03)
pub fn encode_start_action_with_duration(action_id: u16, invoke_id: u32, duration: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt32(duration)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode StopAction command (0x04)
pub fn encode_stop_action(action_id: u16, invoke_id: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode PauseAction command (0x05)
pub fn encode_pause_action(action_id: u16, invoke_id: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode PauseActionWithDuration command (0x06)
pub fn encode_pause_action_with_duration(action_id: u16, invoke_id: u32, duration: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt32(duration)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode ResumeAction command (0x07)
pub fn encode_resume_action(action_id: u16, invoke_id: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode EnableAction command (0x08)
pub fn encode_enable_action(action_id: u16, invoke_id: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode EnableActionWithDuration command (0x09)
pub fn encode_enable_action_with_duration(action_id: u16, invoke_id: u32, duration: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt32(duration)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode DisableAction command (0x0A)
pub fn encode_disable_action(action_id: u16, invoke_id: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode DisableActionWithDuration command (0x0B)
pub fn encode_disable_action_with_duration(action_id: u16, invoke_id: u32, duration: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(action_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(invoke_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt32(duration)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode ActionList attribute (0x0000)
pub fn decode_action_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<Action>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(Action {
                action_id: item.get_int(&[0]).map(|v| v as u16),
                name: item.get_string_owned(&[1]),
                type_: item.get_int(&[2]).map(|v| v as u8),
                endpoint_list_id: item.get_int(&[3]).map(|v| v as u16),
                supported_commands: item.get_int(&[4]).map(|v| v as u8),
                state: item.get_int(&[5]).map(|v| v as u8),
            });
        }
    }
    Ok(res)
}

/// Decode EndpointLists attribute (0x0001)
pub fn decode_endpoint_lists(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<EndpointList>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(EndpointList {
                endpoint_list_id: item.get_int(&[0]).map(|v| v as u16),
                name: item.get_string_owned(&[1]),
                type_: item.get_int(&[2]).map(|v| v as u8),
                endpoints: {
                    if let Some(tlv::TlvItemValue::List(l)) = item.get(&[3]) {
                        let items: Vec<u16> = l.iter().filter_map(|e| { if let tlv::TlvItemValue::Int(v) = &e.value { Some(*v as u16) } else { None } }).collect();
                        Some(items)
                    } else {
                        None
                    }
                },
            });
        }
    }
    Ok(res)
}

/// Decode SetupURL attribute (0x0002)
pub fn decode_setup_url(inp: &tlv::TlvItemValue) -> anyhow::Result<String> {
    if let tlv::TlvItemValue::String(v) = inp {
        Ok(v.clone())
    } else {
        Err(anyhow::anyhow!("Expected String"))
    }
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x0025 {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x0025, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_action_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_endpoint_lists(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0002 => {
            match decode_setup_url(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "ActionList"),
        (0x0001, "EndpointLists"),
        (0x0002, "SetupURL"),
    ]
}

