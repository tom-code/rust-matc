//! Generated Matter TLV encoders and decoders for Joint Fabric Administrator Cluster
//! Cluster ID: 0x0753
//! 
//! This file is automatically generated from JointFabricAdministratorCluster.xml

use crate::tlv;
use anyhow;
use serde_json;


// Command encoders

/// Encode AddICAC command (0x02)
pub fn encode_add_icac(icac_value: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (1, tlv::TlvItemValueEnc::OctetString(icac_value)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode OpenJointCommissioningWindow command (0x04)
pub fn encode_open_joint_commissioning_window(commissioning_timeout: u16, pake_passcode_verifier: Vec<u8>, discriminator: u16, iterations: u32, salt: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(commissioning_timeout)).into(),
        (1, tlv::TlvItemValueEnc::OctetString(pake_passcode_verifier)).into(),
        (2, tlv::TlvItemValueEnc::UInt16(discriminator)).into(),
        (3, tlv::TlvItemValueEnc::UInt32(iterations)).into(),
        (4, tlv::TlvItemValueEnc::OctetString(salt)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode AnnounceJointFabricAdministrator command (0x08)
pub fn encode_announce_joint_fabric_administrator(endpoint_id: u16) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(endpoint_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode AdministratorFabricIndex attribute (0x0000)
pub fn decode_administrator_fabric_index(inp: &tlv::TlvItemValue) -> anyhow::Result<Option<u8>> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(Some(*v as u8))
    } else {
        Ok(None)
    }
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x0753 {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x0753, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_administrator_fabric_index(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "AdministratorFabricIndex"),
    ]
}

