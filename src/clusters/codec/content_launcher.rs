//! Generated Matter TLV encoders and decoders for Content Launcher Cluster
//! Cluster ID: 0x050A
//! 
//! This file is automatically generated from ContentLauncher.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct AdditionalInfo {
    pub name: Option<String>,
    pub value: Option<String>,
}

#[derive(Debug, serde::Serialize)]
pub struct BrandingInformation {
    pub provider_name: Option<String>,
    pub background: Option<u8>,
    pub logo: Option<u8>,
    pub progress_bar: Option<u8>,
    pub splash: Option<u8>,
    pub water_mark: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct ContentSearch {
    pub parameter_list: Option<Vec<Parameter>>,
}

#[derive(Debug, serde::Serialize)]
pub struct Dimension {
    pub width: Option<u8>,
    pub height: Option<u8>,
    pub metric: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct Parameter {
    pub type_: Option<u8>,
    pub value: Option<String>,
    pub external_id_list: Option<Vec<AdditionalInfo>>,
}

#[derive(Debug, serde::Serialize)]
pub struct PlaybackPreferences {
    pub playback_position: Option<u64>,
    pub text_track: Option<u8>,
    pub audio_tracks: Option<Vec<TrackPreference>>,
}

#[derive(Debug, serde::Serialize)]
pub struct StyleInformation {
    pub image_url: Option<String>,
    pub color: Option<String>,
    pub size: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct TrackPreference {
    pub language_code: Option<String>,
    pub characteristics: Option<Vec<u8>>,
    pub audio_output_index: Option<u8>,
}

// Command encoders

/// Encode LaunchContent command (0x00)
pub fn encode_launch_content(search: u8, auto_play: bool, data: String, playback_preferences: u8, use_current_context: bool) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(search)).into(),
        (1, tlv::TlvItemValueEnc::Bool(auto_play)).into(),
        (2, tlv::TlvItemValueEnc::String(data)).into(),
        (3, tlv::TlvItemValueEnc::UInt8(playback_preferences)).into(),
        (4, tlv::TlvItemValueEnc::Bool(use_current_context)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode LaunchURL command (0x01)
pub fn encode_launch_url(content_url: String, display_string: String, branding_information: u8, playback_preferences: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::String(content_url)).into(),
        (1, tlv::TlvItemValueEnc::String(display_string)).into(),
        (2, tlv::TlvItemValueEnc::UInt8(branding_information)).into(),
        (3, tlv::TlvItemValueEnc::UInt8(playback_preferences)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode AcceptHeader attribute (0x0000)
pub fn decode_accept_header(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<String>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            if let tlv::TlvItemValue::String(s) = &item.value {
                res.push(s.clone());
            }
        }
    }
    Ok(res)
}

/// Decode SupportedStreamingProtocols attribute (0x0001)
pub fn decode_supported_streaming_protocols(inp: &tlv::TlvItemValue) -> anyhow::Result<u8> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u8)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x050A {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x050A, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_accept_header(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_supported_streaming_protocols(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "AcceptHeader"),
        (0x0001, "SupportedStreamingProtocols"),
    ]
}

