//! Generated Matter TLV encoders and decoders for Service Area Cluster
//! Cluster ID: 0x0150
//! 
//! This file is automatically generated from ServiceArea.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct AreaInfo {
    pub location_info: Option<u8>,
    pub landmark_info: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct Area {
    pub area_id: Option<u32>,
    pub map_id: Option<u32>,
    pub area_info: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct LandmarkInfo {
    pub landmark_tag: Option<u8>,
    pub relative_position_tag: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct Map {
    pub map_id: Option<u32>,
    pub name: Option<String>,
}

#[derive(Debug, serde::Serialize)]
pub struct Progress {
    pub area_id: Option<u32>,
    pub status: Option<u8>,
    pub total_operational_time: Option<u8>,
    pub estimated_time: Option<u8>,
}

// Command encoders

/// Encode SelectAreas command (0x00)
pub fn encode_select_areas(new_areas: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::StructAnon(new_areas.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode SkipArea command (0x02)
pub fn encode_skip_area(skipped_area: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt32(skipped_area)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode SupportedAreas attribute (0x0000)
pub fn decode_supported_areas(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<Area>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(Area {
                area_id: item.get_int(&[0]).map(|v| v as u32),
                map_id: item.get_int(&[1]).map(|v| v as u32),
                area_info: item.get_int(&[2]).map(|v| v as u8),
            });
        }
    }
    Ok(res)
}

/// Decode SupportedMaps attribute (0x0001)
pub fn decode_supported_maps(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<Map>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(Map {
                map_id: item.get_int(&[0]).map(|v| v as u32),
                name: item.get_string_owned(&[1]),
            });
        }
    }
    Ok(res)
}

/// Decode SelectedAreas attribute (0x0002)
pub fn decode_selected_areas(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<u32>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            if let tlv::TlvItemValue::Int(i) = &item.value {
                res.push(*i as u32);
            }
        }
    }
    Ok(res)
}

/// Decode CurrentArea attribute (0x0003)
pub fn decode_current_area(inp: &tlv::TlvItemValue) -> anyhow::Result<Option<u32>> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(Some(*v as u32))
    } else {
        Ok(None)
    }
}

/// Decode EstimatedEndTime attribute (0x0004)
pub fn decode_estimated_end_time(inp: &tlv::TlvItemValue) -> anyhow::Result<Option<u64>> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(Some(*v))
    } else {
        Ok(None)
    }
}

/// Decode Progress attribute (0x0005)
pub fn decode_progress(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<Progress>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(Progress {
                area_id: item.get_int(&[0]).map(|v| v as u32),
                status: item.get_int(&[1]).map(|v| v as u8),
                total_operational_time: item.get_int(&[2]).map(|v| v as u8),
                estimated_time: item.get_int(&[3]).map(|v| v as u8),
            });
        }
    }
    Ok(res)
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x0150 {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x0150, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_supported_areas(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_supported_maps(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0002 => {
            match decode_selected_areas(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0003 => {
            match decode_current_area(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0004 => {
            match decode_estimated_end_time(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0005 => {
            match decode_progress(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "SupportedAreas"),
        (0x0001, "SupportedMaps"),
        (0x0002, "SelectedAreas"),
        (0x0003, "CurrentArea"),
        (0x0004, "EstimatedEndTime"),
        (0x0005, "Progress"),
    ]
}

