//! Generated Matter TLV encoders and decoders for Device Energy Management Cluster
//! Cluster ID: 0x0098
//! 
//! This file is automatically generated from DeviceEnergyManagement.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct Constraints {
    pub start_time: Option<u64>,
    pub duration: Option<u8>,
    pub nominal_power: Option<u8>,
    pub maximum_energy: Option<u8>,
    pub load_control: Option<i8>,
}

#[derive(Debug, serde::Serialize)]
pub struct Cost {
    pub cost_type: Option<u8>,
    pub value: Option<i32>,
    pub decimal_points: Option<u8>,
    pub currency: Option<u16>,
}

#[derive(Debug, serde::Serialize)]
pub struct Forecast {
    pub forecast_id: Option<u32>,
    pub active_slot_number: Option<u16>,
    pub start_time: Option<u64>,
    pub end_time: Option<u64>,
    pub earliest_start_time: Option<u64>,
    pub latest_end_time: Option<u64>,
    pub is_pausable: Option<bool>,
    pub slots: Option<Vec<Slot>>,
    pub forecast_update_reason: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct PowerAdjustCapability {
    pub power_adjust_capability: Option<Vec<PowerAdjust>>,
    pub cause: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct PowerAdjust {
    pub min_power: Option<u8>,
    pub max_power: Option<u8>,
    pub min_duration: Option<u8>,
    pub max_duration: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct SlotAdjustment {
    pub slot_index: Option<u8>,
    pub nominal_power: Option<u8>,
    pub duration: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct Slot {
    pub min_duration: Option<u8>,
    pub max_duration: Option<u8>,
    pub default_duration: Option<u8>,
    pub elapsed_slot_time: Option<u8>,
    pub remaining_slot_time: Option<u8>,
    pub slot_is_pausable: Option<bool>,
    pub min_pause_duration: Option<u8>,
    pub max_pause_duration: Option<u8>,
    pub manufacturer_esa_state: Option<u16>,
    pub nominal_power: Option<u8>,
    pub min_power: Option<u8>,
    pub max_power: Option<u8>,
    pub nominal_energy: Option<u8>,
    pub costs: Option<Vec<Cost>>,
    pub min_power_adjustment: Option<u8>,
    pub max_power_adjustment: Option<u8>,
    pub min_duration_adjustment: Option<u8>,
    pub max_duration_adjustment: Option<u8>,
}

// Command encoders

/// Encode PowerAdjustRequest command (0x00)
pub fn encode_power_adjust_request(power: u8, duration: u8, cause: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(power)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(duration)).into(),
        (2, tlv::TlvItemValueEnc::UInt8(cause)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode StartTimeAdjustRequest command (0x02)
pub fn encode_start_time_adjust_request(requested_start_time: u64, cause: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(requested_start_time)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(cause)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode PauseRequest command (0x03)
pub fn encode_pause_request(duration: u8, cause: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(duration)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(cause)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode ModifyForecastRequest command (0x05)
pub fn encode_modify_forecast_request(forecast_id: u32, slot_adjustments: Vec<u8>, cause: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt32(forecast_id)).into(),
        (1, tlv::TlvItemValueEnc::StructAnon(slot_adjustments.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        (2, tlv::TlvItemValueEnc::UInt8(cause)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RequestConstraintBasedForecast command (0x06)
pub fn encode_request_constraint_based_forecast(constraints: Vec<u8>, cause: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::StructAnon(constraints.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        (1, tlv::TlvItemValueEnc::UInt8(cause)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode ESAType attribute (0x0000)
pub fn decode_esa_type(inp: &tlv::TlvItemValue) -> anyhow::Result<u8> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u8)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode ESACanGenerate attribute (0x0001)
pub fn decode_esa_can_generate(inp: &tlv::TlvItemValue) -> anyhow::Result<bool> {
    if let tlv::TlvItemValue::Bool(v) = inp {
        Ok(*v)
    } else {
        Err(anyhow::anyhow!("Expected Bool"))
    }
}

/// Decode ESAState attribute (0x0002)
pub fn decode_esa_state(inp: &tlv::TlvItemValue) -> anyhow::Result<u8> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u8)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode AbsMinPower attribute (0x0003)
pub fn decode_abs_min_power(inp: &tlv::TlvItemValue) -> anyhow::Result<u8> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u8)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode AbsMaxPower attribute (0x0004)
pub fn decode_abs_max_power(inp: &tlv::TlvItemValue) -> anyhow::Result<u8> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u8)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode PowerAdjustmentCapability attribute (0x0005)
pub fn decode_power_adjustment_capability(inp: &tlv::TlvItemValue) -> anyhow::Result<Option<u8>> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(Some(*v as u8))
    } else {
        Ok(None)
    }
}

/// Decode Forecast attribute (0x0006)
pub fn decode_forecast(inp: &tlv::TlvItemValue) -> anyhow::Result<Option<u8>> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(Some(*v as u8))
    } else {
        Ok(None)
    }
}

/// Decode OptOutState attribute (0x0007)
pub fn decode_opt_out_state(inp: &tlv::TlvItemValue) -> anyhow::Result<u8> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u8)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x0098 {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x0098, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_esa_type(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_esa_can_generate(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0002 => {
            match decode_esa_state(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0003 => {
            match decode_abs_min_power(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0004 => {
            match decode_abs_max_power(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0005 => {
            match decode_power_adjustment_capability(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0006 => {
            match decode_forecast(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0007 => {
            match decode_opt_out_state(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "ESAType"),
        (0x0001, "ESACanGenerate"),
        (0x0002, "ESAState"),
        (0x0003, "AbsMinPower"),
        (0x0004, "AbsMaxPower"),
        (0x0005, "PowerAdjustmentCapability"),
        (0x0006, "Forecast"),
        (0x0007, "OptOutState"),
    ]
}

