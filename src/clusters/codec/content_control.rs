//! Generated Matter TLV encoders and decoders for Content Control Cluster
//! Cluster ID: 0x050F
//! 
//! This file is automatically generated from ContentControl.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct AppInfo {
    pub catalog_vendor_id: Option<u16>,
    pub application_id: Option<String>,
}

#[derive(Debug, serde::Serialize)]
pub struct BlockChannel {
    pub block_channel_index: Option<u16>,
    pub major_number: Option<u16>,
    pub minor_number: Option<u16>,
    pub identifier: Option<String>,
}

#[derive(Debug, serde::Serialize)]
pub struct RatingName {
    pub rating_name: Option<String>,
    pub rating_name_desc: Option<String>,
}

#[derive(Debug, serde::Serialize)]
pub struct TimePeriod {
    pub start_hour: Option<u8>,
    pub start_minute: Option<u8>,
    pub end_hour: Option<u8>,
    pub end_minute: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct TimeWindow {
    pub time_window_index: Option<u16>,
    pub day_of_week: Option<u8>,
    pub time_period: Option<Vec<TimePeriod>>,
}

// Command encoders

/// Encode UpdatePIN command (0x00)
pub fn encode_update_pin(old_pin: String, new_pin: String) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::String(old_pin)).into(),
        (1, tlv::TlvItemValueEnc::String(new_pin)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode AddBonusTime command (0x05)
pub fn encode_add_bonus_time(pin_code: String, bonus_time: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::String(pin_code)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(bonus_time)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode SetScreenDailyTime command (0x06)
pub fn encode_set_screen_daily_time(screen_time: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(screen_time)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode SetOnDemandRatingThreshold command (0x09)
pub fn encode_set_on_demand_rating_threshold(rating: String) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::String(rating)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode SetScheduledContentRatingThreshold command (0x0A)
pub fn encode_set_scheduled_content_rating_threshold(rating: String) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::String(rating)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode AddBlockChannels command (0x0B)
pub fn encode_add_block_channels(channels: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::StructAnon(channels.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveBlockChannels command (0x0C)
pub fn encode_remove_block_channels(channel_indexes: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::StructAnon(channel_indexes.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode AddBlockApplications command (0x0D)
pub fn encode_add_block_applications(applications: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::StructAnon(applications.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveBlockApplications command (0x0E)
pub fn encode_remove_block_applications(applications: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::StructAnon(applications.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode SetBlockContentTimeWindow command (0x0F)
pub fn encode_set_block_content_time_window(time_window: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(time_window)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveBlockContentTimeWindow command (0x10)
pub fn encode_remove_block_content_time_window(time_window_indexes: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::StructAnon(time_window_indexes.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode Enabled attribute (0x0000)
pub fn decode_enabled(inp: &tlv::TlvItemValue) -> anyhow::Result<bool> {
    if let tlv::TlvItemValue::Bool(v) = inp {
        Ok(*v)
    } else {
        Err(anyhow::anyhow!("Expected Bool"))
    }
}

/// Decode OnDemandRatings attribute (0x0001)
pub fn decode_on_demand_ratings(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<RatingName>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(RatingName {
                rating_name: item.get_string_owned(&[0]),
                rating_name_desc: item.get_string_owned(&[1]),
            });
        }
    }
    Ok(res)
}

/// Decode OnDemandRatingThreshold attribute (0x0002)
pub fn decode_on_demand_rating_threshold(inp: &tlv::TlvItemValue) -> anyhow::Result<String> {
    if let tlv::TlvItemValue::String(v) = inp {
        Ok(v.clone())
    } else {
        Err(anyhow::anyhow!("Expected String"))
    }
}

/// Decode ScheduledContentRatings attribute (0x0003)
pub fn decode_scheduled_content_ratings(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<RatingName>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(RatingName {
                rating_name: item.get_string_owned(&[0]),
                rating_name_desc: item.get_string_owned(&[1]),
            });
        }
    }
    Ok(res)
}

/// Decode ScheduledContentRatingThreshold attribute (0x0004)
pub fn decode_scheduled_content_rating_threshold(inp: &tlv::TlvItemValue) -> anyhow::Result<String> {
    if let tlv::TlvItemValue::String(v) = inp {
        Ok(v.clone())
    } else {
        Err(anyhow::anyhow!("Expected String"))
    }
}

/// Decode ScreenDailyTime attribute (0x0005)
pub fn decode_screen_daily_time(inp: &tlv::TlvItemValue) -> anyhow::Result<u8> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u8)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode RemainingScreenTime attribute (0x0006)
pub fn decode_remaining_screen_time(inp: &tlv::TlvItemValue) -> anyhow::Result<u8> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u8)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode BlockUnrated attribute (0x0007)
pub fn decode_block_unrated(inp: &tlv::TlvItemValue) -> anyhow::Result<bool> {
    if let tlv::TlvItemValue::Bool(v) = inp {
        Ok(*v)
    } else {
        Err(anyhow::anyhow!("Expected Bool"))
    }
}

/// Decode BlockChannelList attribute (0x0008)
pub fn decode_block_channel_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<BlockChannel>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(BlockChannel {
                block_channel_index: item.get_int(&[0]).map(|v| v as u16),
                major_number: item.get_int(&[1]).map(|v| v as u16),
                minor_number: item.get_int(&[2]).map(|v| v as u16),
                identifier: item.get_string_owned(&[3]),
            });
        }
    }
    Ok(res)
}

/// Decode BlockApplicationList attribute (0x0009)
pub fn decode_block_application_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<AppInfo>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(AppInfo {
                catalog_vendor_id: item.get_int(&[0]).map(|v| v as u16),
                application_id: item.get_string_owned(&[1]),
            });
        }
    }
    Ok(res)
}

/// Decode BlockContentTimeWindow attribute (0x000A)
pub fn decode_block_content_time_window(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<TimeWindow>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(TimeWindow {
                time_window_index: item.get_int(&[0]).map(|v| v as u16),
                day_of_week: item.get_int(&[1]).map(|v| v as u8),
                time_period: {
                    if let Some(tlv::TlvItemValue::List(l)) = item.get(&[2]) {
                        let mut items = Vec::new();
                        for list_item in l {
                            items.push(TimePeriod {
                                start_hour: list_item.get_int(&[0]).map(|v| v as u8),
                                start_minute: list_item.get_int(&[1]).map(|v| v as u8),
                                end_hour: list_item.get_int(&[2]).map(|v| v as u8),
                                end_minute: list_item.get_int(&[3]).map(|v| v as u8),
                            });
                        }
                        Some(items)
                    } else {
                        None
                    }
                },
            });
        }
    }
    Ok(res)
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x050F {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x050F, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_enabled(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_on_demand_ratings(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0002 => {
            match decode_on_demand_rating_threshold(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0003 => {
            match decode_scheduled_content_ratings(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0004 => {
            match decode_scheduled_content_rating_threshold(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0005 => {
            match decode_screen_daily_time(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0006 => {
            match decode_remaining_screen_time(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0007 => {
            match decode_block_unrated(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0008 => {
            match decode_block_channel_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0009 => {
            match decode_block_application_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x000A => {
            match decode_block_content_time_window(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "Enabled"),
        (0x0001, "OnDemandRatings"),
        (0x0002, "OnDemandRatingThreshold"),
        (0x0003, "ScheduledContentRatings"),
        (0x0004, "ScheduledContentRatingThreshold"),
        (0x0005, "ScreenDailyTime"),
        (0x0006, "RemainingScreenTime"),
        (0x0007, "BlockUnrated"),
        (0x0008, "BlockChannelList"),
        (0x0009, "BlockApplicationList"),
        (0x000A, "BlockContentTimeWindow"),
    ]
}

