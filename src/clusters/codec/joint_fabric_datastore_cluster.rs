//! Generated Matter TLV encoders and decoders for Joint Fabric Datastore Cluster
//! Cluster ID: 0x0752
//! 
//! This file is automatically generated from JointFabricDatastoreCluster.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct DatastoreACLEntry {
    pub node_id: Option<u64>,
    pub list_id: Option<u16>,
    pub acl_entry: Option<DatastoreAccessControlEntry>,
    pub status_entry: Option<DatastoreStatusEntry>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreAccessControlEntry {
    pub privilege: Option<u8>,
    pub auth_mode: Option<u8>,
    pub subjects: Option<Vec<u64>>,
    pub targets: Option<Vec<DatastoreAccessControlTarget>>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreAccessControlTarget {
    pub cluster: Option<u32>,
    pub endpoint: Option<u16>,
    pub device_type: Option<u32>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreAdministratorInformationEntry {
    pub node_id: Option<u64>,
    pub friendly_name: Option<String>,
    pub vendor_id: Option<u16>,
    pub icac: Option<Vec<u8>>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreBindingTarget {
    pub node: Option<u64>,
    pub group: Option<u8>,
    pub endpoint: Option<u16>,
    pub cluster: Option<u32>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreEndpointBindingEntry {
    pub node_id: Option<u64>,
    pub endpoint_id: Option<u16>,
    pub list_id: Option<u16>,
    pub binding: Option<DatastoreBindingTarget>,
    pub status_entry: Option<DatastoreStatusEntry>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreEndpointEntry {
    pub endpoint_id: Option<u16>,
    pub node_id: Option<u64>,
    pub friendly_name: Option<String>,
    pub status_entry: Option<DatastoreStatusEntry>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreEndpointGroupIDEntry {
    pub node_id: Option<u64>,
    pub endpoint_id: Option<u16>,
    pub group_id: Option<u8>,
    pub status_entry: Option<DatastoreStatusEntry>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreGroupInformationEntry {
    pub group_id: Option<u64>,
    pub friendly_name: Option<String>,
    pub group_key_set_id: Option<u16>,
    pub group_cat: Option<u16>,
    pub group_cat_version: Option<u16>,
    pub group_permission: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreGroupKeySet {
    pub group_key_set_id: Option<u16>,
    pub group_key_security_policy: Option<u8>,
    pub epoch_key0: Option<Vec<u8>>,
    pub epoch_start_time0: Option<u8>,
    pub epoch_key1: Option<Vec<u8>>,
    pub epoch_start_time1: Option<u8>,
    pub epoch_key2: Option<Vec<u8>>,
    pub epoch_start_time2: Option<u8>,
    pub group_key_multicast_policy: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreNodeInformationEntry {
    pub node_id: Option<u64>,
    pub friendly_name: Option<String>,
    pub commissioning_status_entry: Option<DatastoreStatusEntry>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreNodeKeySetEntry {
    pub node_id: Option<u64>,
    pub group_key_set_id: Option<u16>,
    pub status_entry: Option<DatastoreStatusEntry>,
}

#[derive(Debug, serde::Serialize)]
pub struct DatastoreStatusEntry {
    pub state: Option<u8>,
    pub update_timestamp: Option<u64>,
    pub failure_code: Option<u8>,
}

// Command encoders

/// Encode AddKeySet command (0x00)
pub fn encode_add_key_set(group_key_set: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_key_set)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode UpdateKeySet command (0x01)
pub fn encode_update_key_set(group_key_set: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_key_set)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveKeySet command (0x02)
pub fn encode_remove_key_set(group_key_set_id: u16) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(group_key_set_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode AddGroup command (0x03)
pub fn encode_add_group(group_id: u8, friendly_name: String, group_key_set_id: Option<u16>, group_cat: Option<u16>, group_cat_version: Option<u16>, group_permission: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        (1, tlv::TlvItemValueEnc::String(friendly_name)).into(),
        (2, tlv::TlvItemValueEnc::UInt16(group_key_set_id.unwrap_or(0))).into(),
        (3, tlv::TlvItemValueEnc::UInt16(group_cat.unwrap_or(0))).into(),
        (4, tlv::TlvItemValueEnc::UInt16(group_cat_version.unwrap_or(0))).into(),
        (5, tlv::TlvItemValueEnc::UInt8(group_permission)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode UpdateGroup command (0x04)
pub fn encode_update_group(group_id: u8, friendly_name: Option<String>, group_key_set_id: Option<u16>, group_cat: Option<u16>, group_cat_version: Option<u16>, group_permission: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        (1, tlv::TlvItemValueEnc::String(friendly_name.unwrap_or("".to_string()))).into(),
        (2, tlv::TlvItemValueEnc::UInt16(group_key_set_id.unwrap_or(0))).into(),
        (3, tlv::TlvItemValueEnc::UInt16(group_cat.unwrap_or(0))).into(),
        (4, tlv::TlvItemValueEnc::UInt16(group_cat_version.unwrap_or(0))).into(),
        (5, tlv::TlvItemValueEnc::UInt8(group_permission)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveGroup command (0x05)
pub fn encode_remove_group(group_id: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode AddAdmin command (0x06)
pub fn encode_add_admin(node_id: u64, friendly_name: String, vendor_id: u16, icac: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (1, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        (2, tlv::TlvItemValueEnc::String(friendly_name)).into(),
        (3, tlv::TlvItemValueEnc::UInt16(vendor_id)).into(),
        (4, tlv::TlvItemValueEnc::OctetString(icac)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode UpdateAdmin command (0x07)
pub fn encode_update_admin(node_id: Option<u64>, friendly_name: Option<String>, icac: Option<Vec<u8>>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(node_id.unwrap_or(0))).into(),
        (1, tlv::TlvItemValueEnc::String(friendly_name.unwrap_or("".to_string()))).into(),
        (2, tlv::TlvItemValueEnc::OctetString(icac.unwrap_or(vec![]))).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveAdmin command (0x08)
pub fn encode_remove_admin(node_id: u64) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode AddPendingNode command (0x09)
pub fn encode_add_pending_node(node_id: u64, friendly_name: String) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        (1, tlv::TlvItemValueEnc::String(friendly_name)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RefreshNode command (0x0A)
pub fn encode_refresh_node(node_id: u64) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode UpdateNode command (0x0B)
pub fn encode_update_node(node_id: u64, friendly_name: String) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        (1, tlv::TlvItemValueEnc::String(friendly_name)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveNode command (0x0C)
pub fn encode_remove_node(node_id: u64) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode UpdateEndpointForNode command (0x0D)
pub fn encode_update_endpoint_for_node(endpoint_id: u16, node_id: u64, friendly_name: String) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(endpoint_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        (2, tlv::TlvItemValueEnc::String(friendly_name)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode AddGroupIDToEndpointForNode command (0x0E)
pub fn encode_add_group_id_to_endpoint_for_node(node_id: u64, endpoint_id: u16, group_id: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt16(endpoint_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveGroupIDFromEndpointForNode command (0x0F)
pub fn encode_remove_group_id_from_endpoint_for_node(node_id: u64, endpoint_id: u16, group_id: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt16(endpoint_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode AddBindingToEndpointForNode command (0x10)
pub fn encode_add_binding_to_endpoint_for_node(node_id: u64, endpoint_id: u16, binding: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt16(endpoint_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt8(binding)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveBindingFromEndpointForNode command (0x11)
pub fn encode_remove_binding_from_endpoint_for_node(list_id: u16, endpoint_id: u16, node_id: u64) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(list_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt16(endpoint_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode AddACLToNode command (0x12)
pub fn encode_add_acl_to_node(node_id: u64, acl_entry: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(acl_entry)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveACLFromNode command (0x13)
pub fn encode_remove_acl_from_node(list_id: u16, node_id: u64) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(list_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt64(node_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode AnchorRootCA attribute (0x0000)
pub fn decode_anchor_root_ca(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<u8>> {
    if let tlv::TlvItemValue::OctetString(v) = inp {
        Ok(v.clone())
    } else {
        Err(anyhow::anyhow!("Expected OctetString"))
    }
}

/// Decode AnchorNodeID attribute (0x0001)
pub fn decode_anchor_node_id(inp: &tlv::TlvItemValue) -> anyhow::Result<u64> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode AnchorVendorID attribute (0x0002)
pub fn decode_anchor_vendor_id(inp: &tlv::TlvItemValue) -> anyhow::Result<u16> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u16)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode FriendlyName attribute (0x0003)
pub fn decode_friendly_name(inp: &tlv::TlvItemValue) -> anyhow::Result<String> {
    if let tlv::TlvItemValue::String(v) = inp {
        Ok(v.clone())
    } else {
        Err(anyhow::anyhow!("Expected String"))
    }
}

/// Decode GroupKeySetList attribute (0x0004)
pub fn decode_group_key_set_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<DatastoreGroupKeySet>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(DatastoreGroupKeySet {
                group_key_set_id: item.get_int(&[0]).map(|v| v as u16),
                group_key_security_policy: item.get_int(&[1]).map(|v| v as u8),
                epoch_key0: item.get_octet_string_owned(&[2]),
                epoch_start_time0: item.get_int(&[3]).map(|v| v as u8),
                epoch_key1: item.get_octet_string_owned(&[4]),
                epoch_start_time1: item.get_int(&[5]).map(|v| v as u8),
                epoch_key2: item.get_octet_string_owned(&[6]),
                epoch_start_time2: item.get_int(&[7]).map(|v| v as u8),
                group_key_multicast_policy: item.get_int(&[8]).map(|v| v as u8),
            });
        }
    }
    Ok(res)
}

/// Decode GroupList attribute (0x0005)
pub fn decode_group_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<DatastoreGroupInformationEntry>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(DatastoreGroupInformationEntry {
                group_id: item.get_int(&[0]),
                friendly_name: item.get_string_owned(&[1]),
                group_key_set_id: item.get_int(&[2]).map(|v| v as u16),
                group_cat: item.get_int(&[3]).map(|v| v as u16),
                group_cat_version: item.get_int(&[4]).map(|v| v as u16),
                group_permission: item.get_int(&[5]).map(|v| v as u8),
            });
        }
    }
    Ok(res)
}

/// Decode NodeList attribute (0x0006)
pub fn decode_node_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<DatastoreNodeInformationEntry>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(DatastoreNodeInformationEntry {
                node_id: item.get_int(&[1]),
                friendly_name: item.get_string_owned(&[2]),
                commissioning_status_entry: {
                    if let Some(tlv::TlvItemValue::List(_)) = item.get(&[3]) {
                        if let Some(nested_tlv) = item.get(&[3]) {
                            let nested_item = tlv::TlvItem { tag: 3, value: nested_tlv.clone() };
                            Some(DatastoreStatusEntry {
                                state: nested_item.get_int(&[0]).map(|v| v as u8),
                                update_timestamp: nested_item.get_int(&[1]),
                                failure_code: nested_item.get_int(&[2]).map(|v| v as u8),
                            })
                        } else {
                            None
                        }
                    } else {
                        None
                    }
                },
            });
        }
    }
    Ok(res)
}

/// Decode AdminList attribute (0x0007)
pub fn decode_admin_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<DatastoreAdministratorInformationEntry>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(DatastoreAdministratorInformationEntry {
                node_id: item.get_int(&[1]),
                friendly_name: item.get_string_owned(&[2]),
                vendor_id: item.get_int(&[3]).map(|v| v as u16),
                icac: item.get_octet_string_owned(&[4]),
            });
        }
    }
    Ok(res)
}

/// Decode Status attribute (0x0008)
pub fn decode_status(inp: &tlv::TlvItemValue) -> anyhow::Result<DatastoreStatusEntry> {
    if let tlv::TlvItemValue::List(_fields) = inp {
        // Struct with fields
        let item = tlv::TlvItem { tag: 0, value: inp.clone() };
        Ok(DatastoreStatusEntry {
                state: item.get_int(&[0]).map(|v| v as u8),
                update_timestamp: item.get_int(&[1]),
                failure_code: item.get_int(&[2]).map(|v| v as u8),
        })
    } else {
        Err(anyhow::anyhow!("Expected struct fields"))
    }
}

/// Decode EndpointGroupIDList attribute (0x0009)
pub fn decode_endpoint_group_id_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<DatastoreEndpointGroupIDEntry>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(DatastoreEndpointGroupIDEntry {
                node_id: item.get_int(&[0]),
                endpoint_id: item.get_int(&[1]).map(|v| v as u16),
                group_id: item.get_int(&[2]).map(|v| v as u8),
                status_entry: {
                    if let Some(tlv::TlvItemValue::List(_)) = item.get(&[3]) {
                        if let Some(nested_tlv) = item.get(&[3]) {
                            let nested_item = tlv::TlvItem { tag: 3, value: nested_tlv.clone() };
                            Some(DatastoreStatusEntry {
                                state: nested_item.get_int(&[0]).map(|v| v as u8),
                                update_timestamp: nested_item.get_int(&[1]),
                                failure_code: nested_item.get_int(&[2]).map(|v| v as u8),
                            })
                        } else {
                            None
                        }
                    } else {
                        None
                    }
                },
            });
        }
    }
    Ok(res)
}

/// Decode EndpointBindingList attribute (0x000A)
pub fn decode_endpoint_binding_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<DatastoreEndpointBindingEntry>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(DatastoreEndpointBindingEntry {
                node_id: item.get_int(&[0]),
                endpoint_id: item.get_int(&[1]).map(|v| v as u16),
                list_id: item.get_int(&[2]).map(|v| v as u16),
                binding: {
                    if let Some(tlv::TlvItemValue::List(_)) = item.get(&[3]) {
                        if let Some(nested_tlv) = item.get(&[3]) {
                            let nested_item = tlv::TlvItem { tag: 3, value: nested_tlv.clone() };
                            Some(DatastoreBindingTarget {
                                node: nested_item.get_int(&[1]),
                                group: nested_item.get_int(&[2]).map(|v| v as u8),
                                endpoint: nested_item.get_int(&[3]).map(|v| v as u16),
                                cluster: nested_item.get_int(&[4]).map(|v| v as u32),
                            })
                        } else {
                            None
                        }
                    } else {
                        None
                    }
                },
                status_entry: {
                    if let Some(tlv::TlvItemValue::List(_)) = item.get(&[4]) {
                        if let Some(nested_tlv) = item.get(&[4]) {
                            let nested_item = tlv::TlvItem { tag: 4, value: nested_tlv.clone() };
                            Some(DatastoreStatusEntry {
                                state: nested_item.get_int(&[0]).map(|v| v as u8),
                                update_timestamp: nested_item.get_int(&[1]),
                                failure_code: nested_item.get_int(&[2]).map(|v| v as u8),
                            })
                        } else {
                            None
                        }
                    } else {
                        None
                    }
                },
            });
        }
    }
    Ok(res)
}

/// Decode NodeKeySetList attribute (0x000B)
pub fn decode_node_key_set_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<DatastoreNodeKeySetEntry>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(DatastoreNodeKeySetEntry {
                node_id: item.get_int(&[0]),
                group_key_set_id: item.get_int(&[1]).map(|v| v as u16),
                status_entry: {
                    if let Some(tlv::TlvItemValue::List(_)) = item.get(&[2]) {
                        if let Some(nested_tlv) = item.get(&[2]) {
                            let nested_item = tlv::TlvItem { tag: 2, value: nested_tlv.clone() };
                            Some(DatastoreStatusEntry {
                                state: nested_item.get_int(&[0]).map(|v| v as u8),
                                update_timestamp: nested_item.get_int(&[1]),
                                failure_code: nested_item.get_int(&[2]).map(|v| v as u8),
                            })
                        } else {
                            None
                        }
                    } else {
                        None
                    }
                },
            });
        }
    }
    Ok(res)
}

/// Decode NodeACLList attribute (0x000C)
pub fn decode_node_acl_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<DatastoreACLEntry>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(DatastoreACLEntry {
                node_id: item.get_int(&[0]),
                list_id: item.get_int(&[1]).map(|v| v as u16),
                acl_entry: {
                    if let Some(tlv::TlvItemValue::List(_)) = item.get(&[2]) {
                        if let Some(nested_tlv) = item.get(&[2]) {
                            let nested_item = tlv::TlvItem { tag: 2, value: nested_tlv.clone() };
                            Some(DatastoreAccessControlEntry {
                                privilege: nested_item.get_int(&[1]).map(|v| v as u8),
                                auth_mode: nested_item.get_int(&[2]).map(|v| v as u8),
                                subjects: {
                                    if let Some(tlv::TlvItemValue::List(l)) = nested_item.get(&[3]) {
                                        let items: Vec<u64> = l.iter().filter_map(|e| {
                                            if let tlv::TlvItemValue::Int(v) = &e.value {
                                                Some(*v)
                                            } else {
                                                None
                                            }
                                        }).collect();
                                        Some(items)
                                    } else {
                                        None
                                    }
                                },
                                targets: {
                                    if let Some(tlv::TlvItemValue::List(nested_l)) = nested_item.get(&[4]) {
                                        let mut nested_items = Vec::new();
                                        for nested_item in nested_l {
                                            nested_items.push(DatastoreAccessControlTarget {
                                cluster: nested_item.get_int(&[0]).map(|v| v as u32),
                                endpoint: nested_item.get_int(&[1]).map(|v| v as u16),
                                device_type: nested_item.get_int(&[2]).map(|v| v as u32),
                                            });
                                        }
                                        Some(nested_items)
                                    } else {
                                        None
                                    }
                                },
                            })
                        } else {
                            None
                        }
                    } else {
                        None
                    }
                },
                status_entry: {
                    if let Some(tlv::TlvItemValue::List(_)) = item.get(&[3]) {
                        if let Some(nested_tlv) = item.get(&[3]) {
                            let nested_item = tlv::TlvItem { tag: 3, value: nested_tlv.clone() };
                            Some(DatastoreStatusEntry {
                                state: nested_item.get_int(&[0]).map(|v| v as u8),
                                update_timestamp: nested_item.get_int(&[1]),
                                failure_code: nested_item.get_int(&[2]).map(|v| v as u8),
                            })
                        } else {
                            None
                        }
                    } else {
                        None
                    }
                },
            });
        }
    }
    Ok(res)
}

/// Decode NodeEndpointList attribute (0x000D)
pub fn decode_node_endpoint_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<DatastoreEndpointEntry>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(DatastoreEndpointEntry {
                endpoint_id: item.get_int(&[0]).map(|v| v as u16),
                node_id: item.get_int(&[1]),
                friendly_name: item.get_string_owned(&[2]),
                status_entry: {
                    if let Some(tlv::TlvItemValue::List(_)) = item.get(&[3]) {
                        if let Some(nested_tlv) = item.get(&[3]) {
                            let nested_item = tlv::TlvItem { tag: 3, value: nested_tlv.clone() };
                            Some(DatastoreStatusEntry {
                                state: nested_item.get_int(&[0]).map(|v| v as u8),
                                update_timestamp: nested_item.get_int(&[1]),
                                failure_code: nested_item.get_int(&[2]).map(|v| v as u8),
                            })
                        } else {
                            None
                        }
                    } else {
                        None
                    }
                },
            });
        }
    }
    Ok(res)
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x0752 {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x0752, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_anchor_root_ca(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_anchor_node_id(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0002 => {
            match decode_anchor_vendor_id(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0003 => {
            match decode_friendly_name(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0004 => {
            match decode_group_key_set_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0005 => {
            match decode_group_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0006 => {
            match decode_node_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0007 => {
            match decode_admin_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0008 => {
            match decode_status(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0009 => {
            match decode_endpoint_group_id_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x000A => {
            match decode_endpoint_binding_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x000B => {
            match decode_node_key_set_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x000C => {
            match decode_node_acl_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x000D => {
            match decode_node_endpoint_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "AnchorRootCA"),
        (0x0001, "AnchorNodeID"),
        (0x0002, "AnchorVendorID"),
        (0x0003, "FriendlyName"),
        (0x0004, "GroupKeySetList"),
        (0x0005, "GroupList"),
        (0x0006, "NodeList"),
        (0x0007, "AdminList"),
        (0x0008, "Status"),
        (0x0009, "EndpointGroupIDList"),
        (0x000A, "EndpointBindingList"),
        (0x000B, "NodeKeySetList"),
        (0x000C, "NodeACLList"),
        (0x000D, "NodeEndpointList"),
    ]
}

