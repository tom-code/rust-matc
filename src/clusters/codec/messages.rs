//! Generated Matter TLV encoders and decoders for Messages Cluster
//! Cluster ID: 0x0097
//! 
//! This file is automatically generated from Messages.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct MessageResponseOption {
    pub message_response_id: Option<u32>,
    pub label: Option<String>,
}

#[derive(Debug, serde::Serialize)]
pub struct Message {
    pub message_id: Option<u8>,
    pub priority: Option<u8>,
    pub message_control: Option<u8>,
    pub start_time: Option<u64>,
    pub duration: Option<u64>,
    pub message_text: Option<String>,
    pub responses: Option<Vec<MessageResponseOption>>,
}

// Command encoders

/// Encode PresentMessagesRequest command (0x00)
pub fn encode_present_messages_request(message_id: u8, priority: u8, message_control: u8, start_time: Option<u64>, duration: Option<u64>, message_text: String, responses: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(message_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(priority)).into(),
        (2, tlv::TlvItemValueEnc::UInt8(message_control)).into(),
        (3, tlv::TlvItemValueEnc::UInt64(start_time.unwrap_or(0))).into(),
        (4, tlv::TlvItemValueEnc::UInt64(duration.unwrap_or(0))).into(),
        (5, tlv::TlvItemValueEnc::String(message_text)).into(),
        (6, tlv::TlvItemValueEnc::StructAnon(responses.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode CancelMessagesRequest command (0x01)
pub fn encode_cancel_messages_request(message_i_ds: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::StructAnon(message_i_ds.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode Messages attribute (0x0000)
pub fn decode_messages(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<Message>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(Message {
                message_id: item.get_int(&[0]).map(|v| v as u8),
                priority: item.get_int(&[1]).map(|v| v as u8),
                message_control: item.get_int(&[2]).map(|v| v as u8),
                start_time: item.get_int(&[3]),
                duration: item.get_int(&[4]),
                message_text: item.get_string_owned(&[5]),
                responses: {
                    if let Some(tlv::TlvItemValue::List(l)) = item.get(&[6]) {
                        let mut items = Vec::new();
                        for list_item in l {
                            items.push(MessageResponseOption {
                                message_response_id: list_item.get_int(&[0]).map(|v| v as u32),
                                label: list_item.get_string_owned(&[1]),
                            });
                        }
                        Some(items)
                    } else {
                        None
                    }
                },
            });
        }
    }
    Ok(res)
}

/// Decode ActiveMessageIDs attribute (0x0001)
pub fn decode_active_message_i_ds(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<u8>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            if let tlv::TlvItemValue::Int(i) = &item.value {
                res.push(*i as u8);
            }
        }
    }
    Ok(res)
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x0097 {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x0097, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_messages(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_active_message_i_ds(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "Messages"),
        (0x0001, "ActiveMessageIDs"),
    ]
}

