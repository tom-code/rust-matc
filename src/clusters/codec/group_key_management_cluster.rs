//! Generated Matter TLV encoders and decoders for Group Key Management Cluster
//! Cluster ID: 0x003F
//! 
//! This file is automatically generated from Group-Key-Management-Cluster.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct GroupInfoMap {
    pub group_id: Option<u8>,
    pub endpoints: Option<Vec<u16>>,
    pub group_name: Option<String>,
}

#[derive(Debug, serde::Serialize)]
pub struct GroupKeyMap {
    pub group_id: Option<u8>,
    pub group_key_set_id: Option<u16>,
}

#[derive(Debug, serde::Serialize)]
pub struct GroupKeySet {
    pub group_key_set_id: Option<u16>,
    pub group_key_security_policy: Option<u8>,
    pub epoch_key0: Option<Vec<u8>>,
    pub epoch_start_time0: Option<u8>,
    pub epoch_key1: Option<Vec<u8>>,
    pub epoch_start_time1: Option<u8>,
    pub epoch_key2: Option<Vec<u8>>,
    pub epoch_start_time2: Option<u8>,
    pub group_key_multicast_policy: Option<u8>,
}

// Command encoders

/// Encode KeySetWrite command (0x00)
pub fn encode_key_set_write(group_key_set: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_key_set)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode KeySetRead command (0x01)
pub fn encode_key_set_read(group_key_set_id: u16) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(group_key_set_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode KeySetRemove command (0x03)
pub fn encode_key_set_remove(group_key_set_id: u16) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(group_key_set_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode KeySetReadAllIndices command (0x04)
pub fn encode_key_set_read_all_indices(do_not_use: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(do_not_use)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode GroupKeyMap attribute (0x0000)
pub fn decode_group_key_map(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<GroupKeyMap>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(GroupKeyMap {
                group_id: item.get_int(&[1]).map(|v| v as u8),
                group_key_set_id: item.get_int(&[2]).map(|v| v as u16),
            });
        }
    }
    Ok(res)
}

/// Decode GroupTable attribute (0x0001)
pub fn decode_group_table(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<GroupInfoMap>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(GroupInfoMap {
                group_id: item.get_int(&[1]).map(|v| v as u8),
                endpoints: {
                    if let Some(tlv::TlvItemValue::List(l)) = item.get(&[2]) {
                        let items: Vec<u16> = l.iter().filter_map(|e| {
                            if let tlv::TlvItemValue::Int(v) = &e.value {
                                Some(*v as u16)
                            } else {
                                None
                            }
                        }).collect();
                        Some(items)
                    } else {
                        None
                    }
                },
                group_name: item.get_string_owned(&[3]),
            });
        }
    }
    Ok(res)
}

/// Decode MaxGroupsPerFabric attribute (0x0002)
pub fn decode_max_groups_per_fabric(inp: &tlv::TlvItemValue) -> anyhow::Result<u16> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u16)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode MaxGroupKeysPerFabric attribute (0x0003)
pub fn decode_max_group_keys_per_fabric(inp: &tlv::TlvItemValue) -> anyhow::Result<u16> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u16)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x003F {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x003F, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_group_key_map(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_group_table(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0002 => {
            match decode_max_groups_per_fabric(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0003 => {
            match decode_max_group_keys_per_fabric(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "GroupKeyMap"),
        (0x0001, "GroupTable"),
        (0x0002, "MaxGroupsPerFabric"),
        (0x0003, "MaxGroupKeysPerFabric"),
    ]
}

