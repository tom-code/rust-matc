//! Generated Matter TLV encoders and decoders for OTA Software Update Provider Cluster
//! Cluster ID: 0x0029
//! 
//! This file is automatically generated from OTAProvider.xml

use crate::tlv;
use anyhow;


// Command encoders

/// Encode QueryImage command (0x00)
pub fn encode_query_image(vendor_id: u16, product_id: u16, software_version: u32, protocols_supported: Vec<u8>, hardware_version: u16, location: String, requestor_can_consent: bool, metadata_for_provider: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(vendor_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt16(product_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt32(software_version)).into(),
        (3, tlv::TlvItemValueEnc::StructAnon(protocols_supported.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        (4, tlv::TlvItemValueEnc::UInt16(hardware_version)).into(),
        (5, tlv::TlvItemValueEnc::String(location)).into(),
        (6, tlv::TlvItemValueEnc::Bool(requestor_can_consent)).into(),
        (7, tlv::TlvItemValueEnc::OctetString(metadata_for_provider)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode ApplyUpdateRequest command (0x02)
pub fn encode_apply_update_request(update_token: Vec<u8>, new_version: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::OctetString(update_token)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(new_version)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode NotifyUpdateApplied command (0x04)
pub fn encode_notify_update_applied(update_token: Vec<u8>, software_version: u32) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::OctetString(update_token)).into(),
        (1, tlv::TlvItemValueEnc::UInt32(software_version)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

