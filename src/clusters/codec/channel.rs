//! Generated Matter TLV encoders and decoders for Channel Cluster
//! Cluster ID: 0x0504
//! 
//! This file is automatically generated from Channel.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct ChannelInfo {
    pub major_number: Option<u16>,
    pub minor_number: Option<u16>,
    pub name: Option<String>,
    pub call_sign: Option<String>,
    pub affiliate_call_sign: Option<String>,
    pub identifier: Option<String>,
    pub type_: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct ChannelPaging {
    pub previous_token: Option<u8>,
    pub next_token: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct LineupInfo {
    pub operator_name: Option<String>,
    pub lineup_name: Option<String>,
    pub postal_code: Option<String>,
    pub lineup_info_type: Option<u8>,
}

#[derive(Debug, serde::Serialize)]
pub struct PageToken {
    pub limit: Option<u16>,
    pub after: Option<String>,
    pub before: Option<String>,
}

#[derive(Debug, serde::Serialize)]
pub struct ProgramCast {
    pub name: Option<String>,
    pub role: Option<String>,
}

#[derive(Debug, serde::Serialize)]
pub struct ProgramCategory {
    pub category: Option<String>,
    pub sub_category: Option<String>,
}

#[derive(Debug, serde::Serialize)]
pub struct Program {
    pub identifier: Option<String>,
    pub channel: Option<u8>,
    pub start_time: Option<u64>,
    pub end_time: Option<u64>,
    pub title: Option<String>,
    pub subtitle: Option<String>,
    pub description: Option<String>,
    pub audio_languages: Option<Vec<String>>,
    pub ratings: Option<Vec<String>>,
    pub thumbnail_url: Option<String>,
    pub poster_art_url: Option<String>,
    pub dvbi_url: Option<String>,
    pub release_date: Option<String>,
    pub parental_guidance_text: Option<String>,
    pub recording_flag: Option<u8>,
    pub series_info: Option<u8>,
    pub category_list: Option<Vec<ProgramCategory>>,
    pub cast_list: Option<Vec<ProgramCast>>,
}

#[derive(Debug, serde::Serialize)]
pub struct SeriesInfo {
    pub season: Option<String>,
    pub episode: Option<String>,
}

// Command encoders

/// Encode ChangeChannel command (0x00)
pub fn encode_change_channel(match_: String) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::String(match_)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode ChangeChannelByNumber command (0x02)
pub fn encode_change_channel_by_number(major_number: u16, minor_number: u16) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt16(major_number)).into(),
        (1, tlv::TlvItemValueEnc::UInt16(minor_number)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode SkipChannel command (0x03)
pub fn encode_skip_channel(count: i16) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::Int16(count)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode GetProgramGuide command (0x04)
pub fn encode_get_program_guide(start_time: u64, end_time: u64, channel_list: Vec<u8>, page_token: Option<u8>, recording_flag: Option<u8>, external_id_list: Vec<u8>, data: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt64(start_time)).into(),
        (1, tlv::TlvItemValueEnc::UInt64(end_time)).into(),
        (2, tlv::TlvItemValueEnc::StructAnon(channel_list.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        (3, tlv::TlvItemValueEnc::UInt8(page_token.unwrap_or_default())).into(),
        (5, tlv::TlvItemValueEnc::UInt8(recording_flag.unwrap_or_default())).into(),
        (6, tlv::TlvItemValueEnc::StructAnon(external_id_list.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        (7, tlv::TlvItemValueEnc::OctetString(data)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RecordProgram command (0x06)
pub fn encode_record_program(program_identifier: String, should_record_series: bool, external_id_list: Vec<u8>, data: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::String(program_identifier)).into(),
        (1, tlv::TlvItemValueEnc::Bool(should_record_series)).into(),
        (2, tlv::TlvItemValueEnc::StructAnon(external_id_list.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        (3, tlv::TlvItemValueEnc::OctetString(data)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode CancelRecordProgram command (0x07)
pub fn encode_cancel_record_program(program_identifier: String, should_record_series: bool, external_id_list: Vec<u8>, data: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::String(program_identifier)).into(),
        (1, tlv::TlvItemValueEnc::Bool(should_record_series)).into(),
        (2, tlv::TlvItemValueEnc::StructAnon(external_id_list.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        (3, tlv::TlvItemValueEnc::OctetString(data)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode ChannelList attribute (0x0000)
pub fn decode_channel_list(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<ChannelInfo>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(ChannelInfo {
                major_number: item.get_int(&[0]).map(|v| v as u16),
                minor_number: item.get_int(&[1]).map(|v| v as u16),
                name: item.get_string_owned(&[2]),
                call_sign: item.get_string_owned(&[3]),
                affiliate_call_sign: item.get_string_owned(&[4]),
                identifier: item.get_string_owned(&[5]),
                type_: item.get_int(&[6]).map(|v| v as u8),
            });
        }
    }
    Ok(res)
}

/// Decode Lineup attribute (0x0001)
pub fn decode_lineup(inp: &tlv::TlvItemValue) -> anyhow::Result<Option<u8>> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(Some(*v as u8))
    } else {
        Ok(None)
    }
}

/// Decode CurrentChannel attribute (0x0002)
pub fn decode_current_channel(inp: &tlv::TlvItemValue) -> anyhow::Result<Option<u8>> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(Some(*v as u8))
    } else {
        Ok(None)
    }
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x0504 {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x0504, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_channel_list(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_lineup(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0002 => {
            match decode_current_channel(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "ChannelList"),
        (0x0001, "Lineup"),
        (0x0002, "CurrentChannel"),
    ]
}

