//! Generated Matter TLV encoders and decoders for Scenes Management Cluster
//! Cluster ID: 0x0062
//! 
//! This file is automatically generated from Scenes.xml

use crate::tlv;
use anyhow;
use serde_json;


// Struct definitions

#[derive(Debug, serde::Serialize)]
pub struct AttributeValuePair {
    pub attribute_id: Option<u8>,
    pub value_unsigned8: Option<u8>,
    pub value_signed8: Option<i8>,
    pub value_unsigned16: Option<u16>,
    pub value_signed16: Option<i16>,
    pub value_unsigned32: Option<u32>,
    pub value_signed32: Option<i32>,
    pub value_unsigned64: Option<u64>,
    pub value_signed64: Option<i64>,
}

#[derive(Debug, serde::Serialize)]
pub struct ExtensionFieldSet {
    pub cluster_id: Option<u32>,
    pub attribute_value_list: Option<Vec<AttributeValuePair>>,
}

#[derive(Debug, serde::Serialize)]
pub struct SceneInfo {
    pub scene_count: Option<u8>,
    pub current_scene: Option<u8>,
    pub current_group: Option<u8>,
    pub scene_valid: Option<bool>,
    pub remaining_capacity: Option<u8>,
}

// Command encoders

/// Encode AddScene command (0x00)
pub fn encode_add_scene(group_id: u8, scene_id: u8, transition_time: u32, scene_name: String, extension_field_set_structs: Vec<u8>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(scene_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt32(transition_time)).into(),
        (3, tlv::TlvItemValueEnc::String(scene_name)).into(),
        (4, tlv::TlvItemValueEnc::StructAnon(extension_field_set_structs.into_iter().map(|v| (0, tlv::TlvItemValueEnc::UInt8(v)).into()).collect())).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode ViewScene command (0x01)
pub fn encode_view_scene(group_id: u8, scene_id: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(scene_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveScene command (0x02)
pub fn encode_remove_scene(group_id: u8, scene_id: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(scene_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RemoveAllScenes command (0x03)
pub fn encode_remove_all_scenes(group_id: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode StoreScene command (0x04)
pub fn encode_store_scene(group_id: u8, scene_id: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(scene_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode RecallScene command (0x05)
pub fn encode_recall_scene(group_id: u8, scene_id: u8, transition_time: Option<u32>) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(scene_id)).into(),
        (2, tlv::TlvItemValueEnc::UInt32(transition_time.unwrap_or(0))).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode GetSceneMembership command (0x06)
pub fn encode_get_scene_membership(group_id: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(group_id)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

/// Encode CopyScene command (0x40)
pub fn encode_copy_scene(mode: u8, group_identifier_from: u8, scene_identifier_from: u8, group_identifier_to: u8, scene_identifier_to: u8) -> anyhow::Result<Vec<u8>> {
    let tlv = tlv::TlvItemEnc {
        tag: 0,
        value: tlv::TlvItemValueEnc::StructInvisible(vec![
        (0, tlv::TlvItemValueEnc::UInt8(mode)).into(),
        (1, tlv::TlvItemValueEnc::UInt8(group_identifier_from)).into(),
        (2, tlv::TlvItemValueEnc::UInt8(scene_identifier_from)).into(),
        (3, tlv::TlvItemValueEnc::UInt8(group_identifier_to)).into(),
        (4, tlv::TlvItemValueEnc::UInt8(scene_identifier_to)).into(),
        ]),
    };
    Ok(tlv.encode()?)
}

// Attribute decoders

/// Decode DoNotUse attribute (0x0000)
pub fn decode_do_not_use(inp: &tlv::TlvItemValue) -> anyhow::Result<u8> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u8)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode SceneTableSize attribute (0x0001)
pub fn decode_scene_table_size(inp: &tlv::TlvItemValue) -> anyhow::Result<u16> {
    if let tlv::TlvItemValue::Int(v) = inp {
        Ok(*v as u16)
    } else {
        Err(anyhow::anyhow!("Expected Integer"))
    }
}

/// Decode FabricSceneInfo attribute (0x0002)
pub fn decode_fabric_scene_info(inp: &tlv::TlvItemValue) -> anyhow::Result<Vec<SceneInfo>> {
    let mut res = Vec::new();
    if let tlv::TlvItemValue::List(v) = inp {
        for item in v {
            res.push(SceneInfo {
                scene_count: item.get_int(&[0]).map(|v| v as u8),
                current_scene: item.get_int(&[1]).map(|v| v as u8),
                current_group: item.get_int(&[2]).map(|v| v as u8),
                scene_valid: item.get_bool(&[3]),
                remaining_capacity: item.get_int(&[4]).map(|v| v as u8),
            });
        }
    }
    Ok(res)
}


// JSON dispatcher function

/// Decode attribute value and return as JSON string
/// 
/// # Parameters
/// * `cluster_id` - The cluster identifier
/// * `attribute_id` - The attribute identifier
/// * `tlv_value` - The TLV value to decode
/// 
/// # Returns
/// JSON string representation of the decoded value or error
pub fn decode_attribute_json(cluster_id: u32, attribute_id: u32, tlv_value: &crate::tlv::TlvItemValue) -> String {
    // Verify this is the correct cluster
    if cluster_id != 0x0062 {
        return format!("{{\"error\": \"Invalid cluster ID. Expected 0x0062, got {}\"}}", cluster_id);
    }
    
    match attribute_id {
        0x0000 => {
            match decode_do_not_use(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0001 => {
            match decode_scene_table_size(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        0x0002 => {
            match decode_fabric_scene_info(tlv_value) {
                Ok(value) => serde_json::to_string(&value).unwrap_or_else(|_| "null".to_string()),
                Err(e) => format!("{{\"error\": \"{}\"}}", e),
            }
        }
        _ => format!("{{\"error\": \"Unknown attribute ID: {}\"}}", attribute_id),
    }
}

/// Get list of all attributes supported by this cluster
/// 
/// # Returns
/// Vector of tuples containing (attribute_id, attribute_name)
pub fn get_attribute_list() -> Vec<(u32, &'static str)> {
    vec![
        (0x0000, "DoNotUse"),
        (0x0001, "SceneTableSize"),
        (0x0002, "FabricSceneInfo"),
    ]
}

